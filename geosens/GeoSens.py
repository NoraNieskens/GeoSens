# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoSens
                                 A QGIS plugin
 This plugin enables you to download data for the GeoSens workshops. 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-02
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Nora Nieskens, University of WÃ¼rzburg
        email                : nora.nieskens@stud-mail.uni-wuerzburg.de
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog


import requests
import sys 
import os

from qgis.core import QgsRasterLayer
#from qgis.core import QgsRasterBandStats
#from qgis.core import QgsRasterRange
#from qgis.core import QgsColorRampShader
#from qgis.core import QgsRasterShader
#from qgis.core import QgsSingleBandPseudoColorRenderer
#from qgis.core import QgsMultiBandColorRenderer


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GeoSens_dialog import GeoSensDialog
import os.path

## Link collection to data in Github
Wuerzburg_Full = 'https://github.com/Ioadidaiz/GeoSensDataRepo/raw/main/Raster/S2_WB_2348_10M.tif'


class GeoSens:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeoSens_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GeoSens')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.
        We implement this ourselves since we do not inherit QObject.
        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeoSens', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.
        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str
        :param text: Text that should be shown in menu items for this action.
        :type text: str
        :param callback: Function to be called when the action is triggered.
        :type callback: function
        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool
        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool
        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool
        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str
        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget
        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.
        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/GeoSens/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GeoSens'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GeoSens'),
                action)
            self.iface.removeToolBarIcon(action)
            
    def getOptions(self):
        filenames = ["Wuerzburg_Full", "Wuerzburg_Small"]
        self.dgl.comboBox.addItems(filenames)
            
            
   # def getVariables(self): 
    #    self.selected_filename = self.dlg.comboBox.currentText()
        
 
            
            
    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
          self.dlg, "Select   output file ","", '*.tif')
        self.dlg.lineEdit_3.setText(filename)
         
      
         
            
    def download_data(self):
        r = requests.get(Wuerzburg_Full, allow_redirects=True)
        # Save Dataset 
        ## Reactive to outputpath by User Input
        self.choosen_path = self.dlg.lineEdit_3.currentText()
        open(choosen_path, 'wb').write(r.content)

        
    
    def load_OSM(self): 
        urlWithParams = 'type=xyz&url=https://tile.openstreetmap.org/{z}/{x}/{y}.png&zmax=19&zmin=0&crs=EPSG3857'
        rlayer2 = QgsRasterLayer(urlWithParams, 'OpenStreetMap', 'wms')
        rlayer2.isValid()
        QgsProject.instance().addMapLayer(rlayer2)
        
        
        
            
    def load_GoogleSat(self): 
        service_url = "mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}" 
        service_uri = "type=xyz&zmin=0&zmax=21&url=https://"+requests.utils.quote(service_url)
        tms_layer = iface.addRasterLayer(service_uri, "Google Sat", "wms")
        #lyrs=y - hybrid #lyrs=s - sat #lyrs=m - road map    
     



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GeoSensDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_file)
          #  self.dgl.getOptions()
        # self.dlg.comboBox.clear()
            self.dlg.comboBox.addItems(["Wuerzburg_Full", "Wuerzburg_Small"])
            self.dlg.checkBox_2.clicked.connect(self.load_OSM)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
          #  name = self.dlg.lineEdit.text()
            pass